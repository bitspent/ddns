{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","domain_name_input","ddns_output","account","DNSContractInstance","DNSContractAddress","DNSContract_URL","handleChange","e","_this","setState","Object","defineProperty","target","id","value","handleSubmit","preventDefault","_this$state","web3","domain_name_input_bytes32","utils","fromAscii","console","log","methods","domainHtml","call","then","result","_this2","this","Web3","providers","HttpProvider","eth","getAccounts","accounts","catch","err","axios","get","DNSContract_ABI","DNSContract","Contract","_this$state2","output","react_default","a","createElement","className","style","paddingTop","onSubmit","marginTop","placeholder","type","onChange","htmlFor","name","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.456d4764.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Web3 from 'web3';\n\nclass App extends Component {\n    state = {\n        domain_name_input: null,\n        ddns_output: null,\n        account: null,\n        DNSContractInstance: null,\n        DNSContractAddress: '0x74f169ca6d34fae11648b3334028ee4c8c4ab7e7',\n        DNSContract_URL: 'https://gist.githubusercontent.com/toolazytobetrue/083ad42fb570817091f75d24aafe6b79/raw/e0943e6dfd2ac74fb8b68a215994d5ae70c359f9/DNSContract.json'\n    };\n\n    componentDidMount() {\n        // const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n        const web3 = new Web3(new Web3.providers.HttpProvider('https://ropsten.infura.io/plnAtKGtcoxBtY9UpS4b'));\n\n        web3.eth.getAccounts().then(accounts => {\n            this.setState({\n                account: accounts[0],\n                web3: web3\n            });\n        })\n            .catch(err => {\n                console.log(err);\n            });\n\n        axios.get(this.state['DNSContract_URL'])\n            .then(result => {\n                if (typeof result['data']['abi'] !== 'undefined') {\n                    var DNSContract_ABI = result['data']['abi'];\n                    let DNSContract = new web3.eth.Contract(DNSContract_ABI, this.state['DNSContractAddress']);\n                    this.setState({\n                        DNSContractInstance: DNSContract\n                    });\n                    console.log(\"Successfully loaded DDNS contract.\");\n                }\n            })\n            .catch(err => {\n                console.log(err);\n            });\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value\n        });\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        let {domain_name_input, web3, DNSContractInstance} = this.state;\n        let domain_name_input_bytes32 = web3.utils.fromAscii(domain_name_input);\n        console.log(\"Submitted form.\");\n        // console.log(DNSContractInstance)\n        // console.log( DNSContractInstance.methods.domainHtml(domain_name_input_bytes32));\n        DNSContractInstance.methods.domainHtml(domain_name_input_bytes32).call().then(result => {\n            this.setState({\n                ddns_output: result,\n                domain_name_input: domain_name_input\n            });\n            console.log(result)\n        })\n    };\n\n    render() {\n        let {ddns_output, domain_name_input} = this.state;\n        let output = ddns_output === null ? (\n            <p className=\"card-body left-align\">Nothing to display</p>\n        ) : (\n            <p className=\"card-body left-align\">{ddns_output}</p>\n        );\n        return (\n            <div className=\"container\">\n                <div className=\"row\" style={{paddingTop: '50px'}}>\n                    <form className=\"col s12\" onSubmit={this.handleSubmit}>\n                        <div className=\"row\">\n                            <div className=\"input-field col\" style={{marginTop: '27px'}}>\n                                dns://\n                            </div>\n                            <div className=\"input-field col s4\">\n                                <input placeholder=\"enter domain name\" id=\"domain_name_input\" type=\"text\"\n                                       className=\"validate\" onChange={this.handleChange}/>\n                                <label htmlFor=\"domain_name_input\">DNS Domain Navigation</label>\n                            </div>\n                            <div className=\"input-field col\">\n                                <button className=\"btn waves-effect waves-light right\" type=\"submit\"\n                                        name=\"action\">\n                                    <i className=\"material-icons right\">search</i>\n                                </button>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n                <div className=\"row\" id=\"ddns_output\">\n                    <div className=\"ticker card\" key={domain_name_input}>\n                        <div className=\"card-content\">\n                            <span className=\"card-title\">{domain_name_input}</span>\n                            {output}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}